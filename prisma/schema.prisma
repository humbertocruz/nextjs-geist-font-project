generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  password       String
  role           Role      @default(USER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  profiles       Profile[]
  posts          Post[]
  rankings       Ranking[]
  locations      Location[]
  events         Event[]
  subscription   Subscription?
}

model Profile {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  type      ProfileType
  firstName String
  lastName  String
  bio       String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, type])
}

model Post {
  id         Int       @id @default(autoincrement())
  author     User      @relation(fields: [authorId], references: [id])
  authorId   Int
  content    String
  media      Media[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Media {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  url       String
  type      MediaType
  createdAt DateTime @default(now())
}

model Ranking {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  score     Int
  createdAt DateTime @default(now())
}

model Location {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  latitude  Float
  longitude Float
  updatedAt DateTime @updatedAt
}

model Event {
  id          Int      @id @default(autoincrement())
  creator     User     @relation(fields: [creatorId], references: [id])
  creatorId   Int
  title       String
  description String?
  location    String?
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Subscription {
  id             Int       @id @default(autoincrement())
  user           User      @relation(fields: [userId], references: [id])
  userId         Int       @unique
  status         SubscriptionStatus
  plan           String
  startedAt      DateTime  @default(now())
  expiresAt      DateTime?
  paymentMethod  String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum ProfileType {
  WIFE
  HUSBAND
}

enum MediaType {
  PHOTO
  VIDEO
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
}
